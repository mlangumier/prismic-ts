import { Content, predicate } from "@prismicio/client";
import { GetStaticProps, NextPage } from "next";
import * as prismicH from "@prismicio/helpers";
import Head from "next/head";
import { createClient, linkResolver } from "../../../prismicio";

interface IProps {
  page: Content.RegionDocument;
  experiences: any;
}

const Page: NextPage<IProps> = ({ page, experiences }) => {
  console.log(experiences.results[2]);

  return (
    <>
      <Head>
        <title>{page.data.name} | Localisation</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="flex flex-col justify-center items-center my-8 mx-4">
        <h2 className="text-2xl">{page.data.name}</h2>
      </main>
    </>
  );
};

export default Page;

export const getStaticProps: GetStaticProps = async ({
  params,
  previewData,
}) => {
  const uid = typeof params?.uid === "string" ? params.uid : "";

  const client = createClient({ previewData });

  const page = await client.getByUID("region", uid);

  //   https://prismic.io/docs/content-relationship //TODO: fetch by region/city
  const experiences = await client.get({
    predicates: [predicate.at("document.type", "experience")],
  });

  return {
    props: {
      page,
      experiences,
    },
  };
};

export async function getStaticPaths() {
  const client = createClient();
  const pages = await client.getAllByType("region");

  return {
    paths: pages.map((page) => prismicH.asLink(page, linkResolver)),
    fallback: false,
  };
}
