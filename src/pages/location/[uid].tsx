import { Content, predicate } from "@prismicio/client";
import { GetStaticProps, NextPage } from "next";
import * as prismicH from "@prismicio/helpers";
import Head from "next/head";
import { createClient, linkResolver } from "../../../prismicio";
import Link from "next/link";

interface IProps {
  page: Content.RegionDocument;
  experiences: Content.ExperienceDocument[];
}

const Page: NextPage<IProps> = ({ page, experiences }) => {
  return (
    <>
      <Head>
        <title>{page.data.name} | Localisation</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="flex flex-col justify-center items-center my-8 mx-4">
        <h2 className="text-2xl">{page.data.name}</h2>

        <div className="mt-8">
          <h2 className="text-xl">Experiences</h2>
          <div>
            {experiences.map((experience: Content.ExperienceDocument) => {
              return (
                <Link
                  href={{
                    pathname: "/experience/[uid]",
                    query: { uid: experience.uid },
                  }}
                  key={experience.uid}
                >
                  <div className="mt-8 shadow-md hover:shadow-lg py-2 px-4 rounded-md">
                    <p className="text-lg underline">
                      {experience.data.title[0].text}
                    </p>
                    <p className="ml-4 text-sm">
                      {experience.data.description[0].text}
                    </p>
                  </div>
                </Link>
              );
            })}
          </div>
        </div>
      </main>
    </>
  );
};

export default Page;

export const getStaticProps: GetStaticProps = async ({
  params,
  previewData,
}) => {
  const uid = typeof params?.uid === "string" ? params.uid : "";

  const client = createClient({ previewData });

  const page = await client.getByUID("region", uid);

  const experiences = await client.getAllByType("experience", {
    predicates: [predicate.at("my.experience.locations.region", page.id)],
  });

  return {
    props: {
      page,
      experiences,
    },
  };
};

export async function getStaticPaths() {
  const client = createClient();
  const pages = await client.getAllByType("region");

  return {
    paths: pages.map((page) => prismicH.asLink(page, linkResolver)),
    fallback: false,
  };
}
