import { Content, predicate } from "@prismicio/client";
import { GetServerSideProps, GetStaticProps, NextPage } from "next";
import * as prismicH from "@prismicio/helpers";
import Head from "next/head";
import { createClient, linkResolver } from "../../../prismicio";
import Link from "next/link";
import { LinkComponent } from "@/components/link";

interface IProps {
  page: Content.RegionDocument;
  experiences: Content.ExperienceDocument[];
  cities: Content.CityDocument[];
}

const Page: NextPage<IProps> = ({ page, cities, experiences }) => {
  // console.log("exp", experiences);
  return (
    <>
      <Head>
        <title>{page.data.name} | Localisation</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="flex flex-col justify-center items-center my-8 mx-4">
        <h2 className="text-2xl">{page.data.name}</h2>

        <div className="mt-8">
          <h2 className="text-xl text-center">Cities</h2>
          <div className="flex justify-center items-center gap-2">
            {cities.map((city: Content.CityDocument) => {
              return (
                <LinkComponent
                  pageType="city"
                  uid={city.uid}
                  typeDataTitle={city.data.name}
                  key={city.id}
                />
              );
            })}
          </div>
        </div>

        <div className="mt-8">
          <h2 className="text-xl">Experiences</h2>
          <div>
            {experiences.map((experience: Content.ExperienceDocument) => {
              return (
                <Link
                  href={{
                    pathname: "/experience/[uid]",
                    query: { uid: experience.uid },
                  }}
                  key={experience.uid}
                >
                  <div className="mt-8 shadow-md hover:shadow-lg py-2 px-4 rounded-md">
                    <p className="text-lg underline">
                      {experience.data.title[0].text} (
                      {experience.data.location.length} ville)
                    </p>
                    <p className="ml-4 text-sm">
                      {experience.data.description[0].text}
                    </p>
                  </div>
                </Link>
              );
            })}
          </div>
        </div>
      </main>
    </>
  );
};

export default Page;

// TEST: export const getServerSideProps: GetServerSideProps = async ({
//* ANSWER: You can not use getStaticProps or getStaticPaths with getServerSideProps.
//* To use SSG, please remove getServerSideProps
export const getStaticProps: GetStaticProps = async ({
  params,
  previewData,
}) => {
  const uid = typeof params?.uid === "string" ? params.uid : "";

  const client = createClient({ previewData });

  const page = await client.getByUID("region", uid);

  // GET Experience from Region
  // Link: Experience in City in Region
  // Idea 1: GraphQuery: From region, get Cities, then get Experiences
  // Idea 2: predicates: Get "experience" with param

  const cities = await client.getAllByType("city", {
    predicates: [predicate.at("my.city.region", page.id)],
  });

  const citiesIds = cities.map((city) => city.id);

  const experiences = await client.getAllByType("experience", {
    predicates: [
      //* Filter: get only Experiences in these cities (eg: regions)
      predicate.any("my.experience.location.city", citiesIds),
    ],
    //* https://prismic.io/docs/query-data-graphql
    graphQuery: `{
      allExperiences {
        location {
          city {
            name
            region {
              name
            }
          }
        }
      }
    }`,
  });
  console.log(
    "------QUERY",
    experiences
    // experiences.map((exp) => exp.data.location)
  );

  // console.log("-----RANDONNEE Cities:", experiences[1].data.location);
  //* experiences[1].data.location -> displays all cities were that experience/hotel is. Issue ?

  return {
    props: {
      page,
      cities,
      experiences,
    },
  };
};

export async function getStaticPaths() {
  const client = createClient();
  const pages = await client.getAllByType("region");

  return {
    paths: pages.map((page) => prismicH.asLink(page, linkResolver)),
    fallback: false,
  };
}
