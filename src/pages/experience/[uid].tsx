import { GetStaticProps, NextPage } from "next";
import Head from "next/head";
import { PrismicRichText } from "@prismicio/react";
import { Content, predicate } from "@prismicio/client";
import * as prismicH from "@prismicio/helpers";
import { createClient, linkResolver } from "../../../prismicio";
import { PrismicNextImage } from "@prismicio/next";
import Link from "next/link";
import { LinkComponent } from "@/components/link";

interface IProps {
  page: Content.ExperienceDocument;
  thematiques: Content.ThematiqueDocument[];
}

const Page: NextPage<IProps> = ({ page, thematiques }) => {
  return (
    <>
      <Head>
        <title>{prismicH.asText(page.data.title)} | Experience</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <div className="my-8 flex flex-col items-center justify-center">
          <div className="mb-4 flex gap-2">
            <h2 className="uppercase">Expérience : </h2>
            <PrismicRichText field={page.data.title} />
          </div>

          <PrismicRichText field={page.data.description} />

          <div className="mt-4 mx-4 flex justify-center items-center gap-4">
            <p>Localisations :</p>

            {page.data.locations.map(({ region }) => {
              return (
                <LinkComponent
                  pageType="location"
                  uid={region.uid}
                  typeDataTitle={region.data.name}
                  key={region.id}
                />
              );
            })}
          </div>

          {page.data.city.length ? (
            <div className="mt-4 mx-4 flex justify-center items-center gap-4">
              <p>Cities :</p>

              {page.data.city.map(({ name: city }) => {
                return (
                  <LinkComponent
                    pageType="city"
                    uid={city.uid}
                    typeDataTitle={city.data.name}
                    key={city.id}
                  />
                );
              })}
            </div>
          ) : null}
        </div>

        <div className="mt-8 text-center border-y-[1px] py-8 border-slate-300">
          <h4 className="text-xl mb-6">Thématiques</h4>
          <div className="flex justify-center items-center gap-4">
            {thematiques?.map((thematique: Content.ThematiqueDocument) => {
              return (
                <Link
                  href={{
                    pathname: "/thematique/[uid]",
                    query: { uid: thematique.uid },
                  }}
                  className="relative flex flex-col justify-center items-center w-max-[250px] py-4 px-6 mx-2 shadow-md hover:shadow-xl rounded-xl"
                  key={thematique.id}
                >
                  <PrismicNextImage
                    field={thematique.data.image}
                    imgixParams={{ sat: -75 }}
                    className="max-w-[250px]"
                  />
                  <div className="mt-4">
                    <PrismicRichText field={thematique.data.name} />
                  </div>
                </Link>
              );
            })}
          </div>
        </div>
      </main>
    </>
  );
};

export default Page;

export const getStaticProps: GetStaticProps = async ({
  params,
  previewData,
}) => {
  const uid = typeof params?.uid === "string" ? params.uid : "";

  const client = createClient({ previewData });

  const page = await client.getByUID("experience", uid, {
    fetchLinks: ["region.name", "city.name"],
  });

  const thematiques = await client.getAllByType("thematique", {
    predicates: [predicate.any("document.tags", page.tags)],
  });

  return {
    props: {
      page,
      thematiques,
    },
  };
};

export async function getStaticPaths() {
  const client = createClient();
  const pages = await client.getAllByType("experience");

  return {
    paths: pages.map((page) => prismicH.asLink(page, linkResolver)),
    fallback: false,
  };
}
