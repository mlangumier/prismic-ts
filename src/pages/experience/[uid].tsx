import { GetStaticProps, NextPage } from "next";
import Head from "next/head";
import { PrismicRichText } from "@prismicio/react";
import { Content, predicate } from "@prismicio/client";
import * as prismicH from "@prismicio/helpers";
import { createClient, linkResolver } from "../../../prismicio";
import { PrismicNextImage } from "@prismicio/next";

interface IProps {
  page: Content.ExperienceDocument;
  thematiques: any;
}

const Page: NextPage<IProps> = ({ page, thematiques }) => {
  return (
    <>
      <Head>
        <title>{prismicH.asText(page.data.title)} | Experience</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <div className="my-8 flex flex-col items-center justify-center">
          <div className="text-3xl">
            <PrismicRichText field={page.data.title} />
          </div>

          <PrismicRichText field={page.data.description} />

          <div className="mt-4 flex justify-center gap-4">
            <p>Localisations :</p>
            {page.data.locations.map(({ region, city }, i) => {
              if (city.id) {
                return (
                  <p key={i}>
                    {city.data.name} ({region.data.name})
                  </p>
                );
              } else {
                return <p key={i}>{region.data.name}</p>;
              }
            })}
          </div>
        </div>

        <div className="mt-8 text-center border-y-[1px] py-8 border-slate-300">
          <h4 className="text-xl mb-6">Th√©matiques</h4>
          <div className="flex justify-center items-center gap-4">
            {thematiques.results?.map(
              (thematique: Content.ThematiqueDocument) => {
                console.log(thematique);
                return (
                  <div
                    className="relative flex flex-col justify-center items-center w-max-[250px] py-4 px-6 mx-2 shadow-md hover:shadow-xl rounded-xl"
                    key={thematique.id}
                  >
                    <PrismicNextImage
                      field={thematique.data.image}
                      imgixParams={{ sat: -75 }}
                      className="max-w-[250px]"
                    />
                    <div className="mt-4">
                      <PrismicRichText field={thematique.data.title} />
                    </div>
                  </div>
                );
              }
            )}
          </div>
        </div>
      </main>
    </>
  );
};

export default Page;

export const getStaticProps: GetStaticProps = async ({
  params,
  previewData,
}) => {
  const uid = typeof params?.uid === "string" ? params.uid : "";

  const client = createClient({ previewData });

  const page = await client.getByUID("experience", uid, {
    fetchLinks: "region.name",
  });

  const thematiques = await client.get({
    predicates: [
      predicate.at("document.type", "thematique"),
      predicate.any("document.tags", page.tags),
    ],
  });

  return {
    props: {
      page,
      thematiques,
    },
  };
};

export async function getStaticPaths() {
  const client = createClient();
  const pages = await client.getAllByType("experience");

  return {
    paths: pages.map((page) => prismicH.asLink(page, linkResolver)),
    fallback: false,
  };
}
