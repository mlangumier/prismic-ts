import { GetStaticProps, NextPage } from "next";
import Head from "next/head";
import { PrismicRichText, SliceZone } from "@prismicio/react";
import { Content, predicate } from "@prismicio/client";
import * as prismicH from "@prismicio/helpers";
import { createClient, linkResolver } from "../../../prismicio";
import { PrismicNextImage } from "@prismicio/next";
import Link from "next/link";
import { LinkComponent } from "@/components/link";

interface IProps {
  page: Content.ThematiqueDocument;
  experiences: Content.ExperienceDocument[];
}

const Page: NextPage<IProps> = ({ page, experiences }) => {
  return (
    <>
      <Head>
        <title>{prismicH.asText(page.data.name)} | Experience</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <div className="my-8 flex flex-col justify-center items-center">
          <div className="mb-8 flex gap-2">
            <h2 className="uppercase">Th√©matique :</h2>
            <PrismicRichText field={page.data.name} />
          </div>

          <div className="max-w-[250px]">
            <PrismicNextImage
              field={page.data.image}
              imgixParams={{ sat: -75 }}
              alt={page.data.name[0]?.text}
            />
          </div>
        </div>

        <div className="mt-8 text-center border-y-[1px] py-8 border-slate-300">
          <h4 className="text-xl mb-6">Experiences:</h4>
          <div className="flex justify-center items-center gap-4">
            {experiences?.map((experience: Content.ExperienceDocument) => {
              return (
                <LinkComponent
                  pageType="experience"
                  uid={experience.uid}
                  typeDataTitle={experience.data.title[0].text}
                  key={experience.uid}
                />
              );
            })}
          </div>
        </div>
      </main>
    </>
  );
};

export default Page;

export const getStaticProps: GetStaticProps = async ({
  params,
  previewData,
}) => {
  const uid = typeof params?.uid === "string" ? params.uid : "";
  const client = createClient({ previewData });

  const page = await client.getByUID("thematique", uid);

  const experiences = await client.getAllByType("experience", {
    predicates: [predicate.at("document.tags", page.tags)],
  });

  return {
    props: {
      page,
      experiences,
    },
  };
};

export async function getStaticPaths() {
  const client = createClient();
  const pages = await client.getAllByType("thematique");

  return {
    paths: pages.map((page) => prismicH.asLink(page, linkResolver)),
    fallback: false,
  };
}
